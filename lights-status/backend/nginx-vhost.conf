server {
  listen 80;
  listen [::]:80;
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  server_name example.com;

  ssl_certificate       /etc/letsencrypt/live/example.com/fullchain.pem;
  ssl_certificate_key   /etc/letsencrypt/live/example.com/privkey.pem;
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

  location /zl34/ping {
    default_type 'application/json';
    content_by_lua '
            local cjson = require "cjson"

            local mckeyname = "zl34:lights"
            local memcached = require "nginx.memcached"
            local memc, err = memcached:new()
            if not memc then
                ngx.log(ngx.STDERR, "failed to instantiate memc: ", err)
                ngx.say(cjson.encode({lights="unknown"}))
                return
            end

            memc:set_timeout(2000) -- 1 sec

            local ok, err = memc:connect("127.0.0.1", 11211)
            if not ok then
                ngx.log(ngx.STDERR, "failed to connect to memcached: ", err)
                ngx.say(cjson.encode({lights="unknown"}))
                return
            end

            results, err = memc:get(mckeyname)

            local lightstatus
            local cached = false
            if not results then
                local handle = io.popen("tailscale ping --c 1 --timeout 1s ord 2>&1", "r")
                local out = handle:read("*all")
                handle:close()

                if string.find(out, "pong") then
                    lightstatus = "on"
                elseif string.find(out, "timed out") then
                    lightstatus = "off"
                else
                    lightstatus = "unknown"
                end
                local ok, err = memc:set(mckeyname, lightstatus, 60)
                if not ok then
                    ngx.log(ngx.STDERR, "failed to write memcached key: ", err)
                end
            else
                cached = true
                lightstatus = results
            end

            ngx.say(cjson.encode({
              lights=lightstatus,
              cached=cached
            }))

            local ok, err = memc:close()
            if not ok then
                ngx.log(ngx.STDERR, "failed to close: ", err)
            end
    ';
  }

  root /var/www/example.com;

  if ($https = '') { return 301 https://$host$request_uri; }

  location /.well-known/acme-challenge/ {
    allow all;
  }

  error_page 404 500 501 502 503 504 /500.html;

  access_log /var/log/nginx/example.com-access.log;
  error_log /var/log/nginx/example.com-error.log;
}
